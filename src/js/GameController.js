import GamePlay from "./GamePlay";
import GameState from "./GameState";
import cursors from "./cursors";
import themes from "./themes";
import { generateTeam } from "./generators";
import PositionedCharacter from "./PositionedCharacter";
import Team from "./Team";

export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;
  }

  init() {
    this.startGame();

    // TODO: add event listeners to gamePlay events
    this.clickCellsListener();
    this.enterOnCellsListener();
    this.leaveCellsListener();

    // TODO: load saved stated from stateService
    this.newGameListener();
    this.saveGameListener();
    this.loadGameListener();
  }

  // –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
  startGame() {
    this.scores = 0;
    this.currentLevel = 1;
    this.gamePlay.drawUi(themes[this.currentLevel - 1]);
    this.selectedChar = null;
    this.userTurn = true;
    this.displayTheLevel();

    // —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    const userTeam = generateTeam(new Team().userTeam, 1, 2);
    const computerTeam = generateTeam(new Team().computerTeam, 1, 2);
    this.userTeamWithPositions = [];
    this.computerTeamWithPositions = [];

    this.userPositions = [
      0, 1, 8, 9, 16, 17, 24, 25, 32, 33, 40, 41, 48, 49, 56, 57,
    ];
    this.computerPositions = [
      6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 62, 63,
    ];

    this.setPositions(userTeam, computerTeam);
    this.checkSetPositions(userTeam, computerTeam);
    this.players = [
      ...this.userTeamWithPositions,
      ...this.computerTeamWithPositions,
    ];
    this.gamePlay.redrawPositions(this.players);

    // –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ö–æ–¥–æ–≤ –∏ –∞—Ç–∞–∫
    this.stepPossibility = false;
    this.attackPossibility = false;
  }

  // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (1, 2, 7, 8 —Å—Ç–æ–ª–±—Ü—ã)
  setPositions(userTeam, computerTeam) {
    userTeam.forEach((char) => {
      this.userTeamWithPositions.push(
        new PositionedCharacter(
          char,
          this.userPositions[
            Math.floor(Math.random() * this.userPositions.length)
          ]
        )
      );
    });

    computerTeam.forEach((char) => {
      this.computerTeamWithPositions.push(
        new PositionedCharacter(
          char,
          this.computerPositions[
            Math.floor(Math.random() * this.userPositions.length)
          ]
        )
      );
    });
  }

  // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∑–∏—Ü–∏–π
  checkSetPositions(userTeam, computerTeam) {
    const arrayOfUserPositions = [];
    const arrayOfComputerPositions = [];

    this.userTeamWithPositions.forEach(char => {
      arrayOfUserPositions.push(char.position);
    })
    this.computerTeamWithPositions.forEach(char => {
      arrayOfComputerPositions.push(char.position);
    })

    if (hasDuplicates(arrayOfUserPositions) || hasDuplicates(arrayOfComputerPositions)) {
      this.userTeamWithPositions = [];
      this.computerTeamWithPositions = [];          
      this.setPositions(userTeam, computerTeam);
    } else {
      return;
    }
  }

  // –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è
  displayTheLevel() {
    const levelTextContent =
      this.gamePlay.container.querySelector("#level span");
    levelTextContent.textContent = this.currentLevel;
  }

  // ========================
  onCellEnter(index) {
    // TODO: react to mouse enter
    // —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –≤ —è—á–µ–π–∫–µ
    const currentChar = this.players.find((char) => char.position === index);

    // –≤—Å–ø–ª—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    if (currentChar) {
      const { level, attack, defence, health } = currentChar.character;
      this.gamePlay.setCursor(cursors.pointer);
      this.gamePlay.showCellTooltip(
        `üéñ${level} ‚öî${attack} üõ°${defence} ‚ù§${health}`,
        index
      );
    } else {
      this.gamePlay.setCursor(cursors.auto);
    }

    // –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏ –∑–µ–ª–µ–Ω—ã–º (–≤ —Ä–∞–º–∫–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤)
    if (this.selectedChar && !currentChar) {
      this.stepPossibility = checkForStep(
        this.selectedChar.position,
        index,
        this.selectedChar.character.step
      );

      if (this.stepPossibility) {
        this.gamePlay.selectCell(index, "green");
        this.gamePlay.setCursor(cursors.pointer);
      }
    }

    // –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏ –∫—Ä–∞—Å–Ω—ã–º (–≤ —Ä–∞–º–∫–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞ –∞—Ç–∞–∫–∏)
    if (this.selectedChar && currentChar && !currentChar.character.userPlayer) {
      this.attackPossibility = checkForAttack(
        this.selectedChar.position,
        index,
        this.selectedChar.character.rangeAttack
      );
      if (this.attackPossibility) {
        this.gamePlay.selectCell(index, "red");
        this.gamePlay.setCursor(cursors.crosshair);
      } else {
        this.gamePlay.setCursor(cursors.notallowed);
      }
    }
  }

  onCellClick(index) {
    // TODO: react to click
    const currentChar = this.players.find((char) => char.position === index);

    // –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —è—á–µ–π–∫—É –ª–∏–±–æ –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ - –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π
    if (currentChar && currentChar.character.userPlayer) {
      this.players.forEach((char) => this.gamePlay.deselectCell(char.position));
      this.gamePlay.selectCell(index);
      this.selectedChar = currentChar;
    } else if (
      currentChar &&
      !currentChar.character.userPlayer &&
      !this.attackPossibility
    ) {
      GamePlay.showError("This is a computer player! Choose your one.");
    }

    // —Ö–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—É—é —è—á–µ–π–∫—É
    if (
      this.selectedChar &&
      !currentChar &&
      this.selectedChar.position !== index
    ) {
      let currentPosition = this.selectedChar.position;
      if (this.stepPossibility && this.userTurn) {
        this.selectedChar.position = index;
        this.gamePlay.redrawPositions(this.players);
        this.gamePlay.selectCell(index);
        this.gamePlay.deselectCell(currentPosition);
        this.finalOfEveryTurn();
      }
    }

    // –∞—Ç–∞–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—É—é —è—á–µ–π–∫—É —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º –∏
    // —É–¥–∞–ª–µ–Ω–∏–µ –∞—Ç–∞–∫—É–µ–º–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –∑–¥–æ—Ä–æ–≤—å–µ —Å—Ç–∞–ª–æ <= 0
    if (
      this.selectedChar &&
      currentChar &&
      !currentChar.character.userPlayer &&
      this.selectedChar.position !== index &&
      this.attackPossibility
    ) {
      const attacker = this.selectedChar;
      const target = currentChar;
      const damagePoints = +Math.max(
        attacker.character.attack - target.character.defence,
        attacker.character.attack * 0.1
      ).toFixed();

      target.character.damage(damagePoints);

      this.players = this.players.filter((char) => char.character.health > 0);
      this.gamePlay.redrawPositions(this.players);
      this.gamePlay
        .showDamage(index, damagePoints)
        .then(() => this.finalOfEveryTurn());
    }
  }

  onCellLeave(index) {
    // TODO: react to mouse leave
    this.gamePlay.hideCellTooltip(index);
    if (this.selectedChar && this.selectedChar.position !== index) {
      this.gamePlay.deselectCell(index);
    }
  }

  // –¥–µ–π—Å—Ç–≤–∏—è –≤ –∫–æ–Ω—Ü–µ —Ö–æ–¥–∞
  finalOfEveryTurn() {
    // –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –æ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–π
    this.gamePlay.cells.forEach((cell) =>
      this.gamePlay.deselectCell(this.gamePlay.cells.indexOf(cell))
    );

    // —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≥–∏–±—à–∏—Ö
    if (this.selectedChar && this.selectedChar.character.health <= 0) {
      this.selectedChar = null;
    }

    // –∫–æ–º–∞–Ω–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –º–µ—Ä—Ç–≤–∞ => –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
    const deadCompPlayers = [...this.players].filter(
      (char) => char.character.userPlayer === false
    );
    if (deadCompPlayers.length === 0) {
      this.toNextLevel();
      return;      
    }

    // –∫–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞ –º–µ—Ä—Ç–≤–∞ => –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
    const arrayOfUserPlayers = [...this.players].filter((char) => char.character.userPlayer);
    if (arrayOfUserPlayers.length === 0
    ) {
      GamePlay.showMessage("Game Over!");
      this.blockTheField();
      return;
    }

    // –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
    this.gamePlay.redrawPositions(this.players);
    if (this.selectedChar) {
      this.gamePlay.selectCell(this.selectedChar.position);
    }

    // –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ö–æ–¥–æ–≤
    if (this.userTurn) {
      this.userTurn = false;
      this.computerTurn();
      } else {
      this.userTurn = true;
    }
  }

  // –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
  toNextLevel() {
    this.currentLevel += 1;    

    if (this.currentLevel > 4) {
      GamePlay.showMessage("You Win!");
      this.endOfGame();
      return;
    } else {
      GamePlay.showMessage("Welcome to New Level!");
    }

    // –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –∏ —Ç–µ–º—ã
    this.gamePlay.drawUi(themes[this.currentLevel - 1]);
    this.displayTheLevel();

    // –ø–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤ –∏ levelUp –∏–≥—Ä–æ–∫–æ–≤
    this.countingScores(this.players);
    this.levelUpPlayers(this.players);

    // —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥

    // –∫–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞
    let additionalUserChars;
    if (this.currentLevel > 2) {
      additionalUserChars = generateTeam(
        new Team().userTeam,
        this.currentLevel - 1,
        2
      );
    } else {
      additionalUserChars = generateTeam(
        new Team().userTeam,
        this.currentLevel - 1,
        1
      );
    }
    const oldUserChars = [...this.players].map((char) => char.character);
    const newUserTeam = [...oldUserChars, ...additionalUserChars];

    // –∫–æ–º–∞–Ω–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    const newComputerTeam = generateTeam(
      new Team().computerTeam,
      this.currentLevel,
      newUserTeam.length
    );

    this.userTeamWithPositions = [];
    this.computerTeamWithPositions = [];
    this.setPositions(newUserTeam, newComputerTeam);
    this.checkSetPositions(newUserTeam, newComputerTeam);

    this.players = [
      ...this.userTeamWithPositions,
      ...this.computerTeamWithPositions,
    ];

    // –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–ª—è —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
    this.gamePlay.cells.forEach((cell) =>
      this.gamePlay.deselectCell(this.gamePlay.cells.indexOf(cell))
    );
    this.selectedChar = null;
    this.gamePlay.redrawPositions(this.players);
  }

  computerTurn() {
    // —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–ª –∏ –∫–æ–º–∞–Ω–¥—ã
    const computerTeam = [];
    const userTeam = [];

    this.players.forEach((char) => {
      if (char.character.userPlayer) {
        userTeam.push(char);
      } else {
        computerTeam.push(char);
      }
    });

    // –≤—ã–±–æ—Ä —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ü–ö
    const randomComputerPlayer =
      computerTeam[Math.floor(Math.random() * computerTeam.length)];

    // —É–∂–µ –∑–∞–Ω—è—Ç—ã–µ –∫–ª–µ—Ç–∫–∏
    let occupiedCells = [];
    this.players.forEach((char) => {
      occupiedCells.push(char.position);
    });

    // –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
    let validCells = new Array(64)
      .fill(0)
      .map((element, i) => (i++))
      .filter((position) => !occupiedCells.includes(position));

    // —Ñ—É–Ω–∫—Ü–∏—è-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–Ω–æ–π —è—á–µ–π–∫–∏ –¥–ª—è —Ö–æ–¥–∞ –ü–ö
    function generateNewPosition(player) {
      const index = Math.floor(Math.random() * validCells.length);
      const stepIsPossible = checkForStep(
        player.position,
        validCells[index],
        player.character.step
      );

      if (!stepIsPossible) {
        return generateNewPosition(player);
      }

      return validCells[index];
    }

    let newCell = generateNewPosition(randomComputerPlayer);    
    this.makeMove(randomComputerPlayer, newCell);
  }

  // —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
  makeMove(char, index) {
    this.players = [...this.players].filter((item) => item !== char);
    char.position = index;
    this.players.push(char);
    this.finalOfEveryTurn();
  }

  // –ø–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤ –∏–≥—Ä–æ–∫–æ–≤
  countingScores(players) {
    this.scores += players.reduce((acc, prev) => {
      if (prev.character.userPlayer) {
        acc += prev.character.health;
      }
      return acc;
    }, 0);
  }

  // levelUp –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
  levelUpPlayers(players) {
    players.reduce((acc, prev) => {
      prev.character.levelUp();
      acc.push(prev);
      return acc;
    }, []);
  }

  blockTheField() {
    this.clickCellsListener = [];
    this.enterOnCellsListener = [];
    this.leaveCellsListener = [];
  }

  endOfGame() {
    this.blockTheField();
  }

  // –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  onNewGame() {
    this.startGame();
    this.countingScores(this.players);
    this.clickCellsListener();
    this.enterOnCellsListener();
    this.leaveCellsListener();
  }

  onSaveGame() {
    const savingTheGame = {
      level: this.currentLevel,
      scores: this.scores,
      turn: this.userTurn,
      players: this.players,
    };

    this.stateService.save(GameState.from(savingTheGame));
  }

  onLoadGame() {
    const savedGame = GameState.from(this.stateService.load());

    if (!savedGame) {
      throw new Error("There is no saved game");
    }

    this.currentLevel = savedGame.level;
    this.scores = savedGame.scores;
    this.userTurn = savedGame.turn;
    this.players = savedGame.players;

    this.gamePlay.drawUi(themes[this.currentLevel - 1]);
    this.displayTheLevel();
    this.gamePlay.redrawPositions(this.players);
  }

  // Events
  enterOnCellsListener() {
    this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this));
  }

  clickCellsListener() {
    this.gamePlay.addCellClickListener(this.onCellClick.bind(this));
  }

  leaveCellsListener() {
    this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this));
  }

  newGameListener() {
    this.gamePlay.addNewGameListener(this.onNewGame.bind(this));
  }

  saveGameListener() {
    this.gamePlay.addSaveGameListener(this.onSaveGame.bind(this));
  }

  loadGameListener() {
    this.gamePlay.addLoadGameListener(this.onLoadGame.bind(this));
  }
}

// –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

// –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–∏ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–∑–∏—Ü–∏–π
function hasDuplicates(array) {
  let valuesSoFar = [];
  for (let i = 0; i < array.length; ++i) {
      let value = array[i];
      if (valuesSoFar.indexOf(value) !== -1) {
          return true;
      }
      valuesSoFar.push(value);
  }
  return false;
}

// –ø–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—è –≤ –¥–≤—É–º–µ—Ä–Ω—É—é –ø–ª–æ—Å–∫–æ—Å—Ç—å

function twoDimensionalBoard() {
  return new Array(64)
    .fill(0)
    .map((item, index) => (index++))
    .map((item, index) => ({ x: index % 8, y: Math.floor(index / 8) }));
}

// —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–æ–¥–∞
function checkForStep(currentPosition, possiblePosition, step) {
  const newArrayOfCoordinates = twoDimensionalBoard();
  const currentDot = newArrayOfCoordinates[currentPosition];
  const possibleDot = newArrayOfCoordinates[possiblePosition];

  const modX = Math.abs(currentDot.x - possibleDot.x);
  const modY = Math.abs(currentDot.y - possibleDot.y);
  const modXY = Math.abs(modX - modY);

  if (modX <= step && modY <= step) {
    if (modXY !== 1 || modX === 0 || modY === 0) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
}

// —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ç–∞–∫–∏
function checkForAttack(currentPosition, possiblePosition, rangeAttack) {
  const newArrayOfCoordinates = twoDimensionalBoard();
  const currentDot = newArrayOfCoordinates[currentPosition];
  const possibleDot = newArrayOfCoordinates[possiblePosition];

  const modX = Math.abs(currentDot.x - possibleDot.x);
  const modY = Math.abs(currentDot.y - possibleDot.y);

  if (modX <= rangeAttack && modY <= rangeAttack) {
    return true;
  } else {
    return false;
  }
}
